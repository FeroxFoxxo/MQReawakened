@page "/rooms/colliders"
@model Web.Razor.Pages.Rooms.CollidersModel
@{
    ViewData["Title"] = "Room Colliders";
}
@section Stylesheets {
    <style>
        :root {
            --c-bg-panel: linear-gradient(145deg,#0f1f29,#142e3b 55%,#0d1a22);
            --c-border-panel: #1f4457;
            --c-border-subtle: #203c4a;
            --c-border-strong: #1d566f;
            --c-accent: #2fa8d8;
            --c-text: #e1f6ff;
            --c-text-dim: #b7d3df;
            --space-1: 4px;
            --space-2: 8px;
            --space-3: 12px;
            --space-4: 16px;
            --radius-sm: 4px;
            --radius-md: 8px;
            --shadow-panel: 0 2px 6px rgba(0,0,0,0.4), inset 0 0 10px rgba(0,0,0,0.35);
        }

        #colliderCanvas { width:100%; height:70vh; border:1px solid #233b48; background:#0b1d2a; cursor:grab; border-radius:var(--radius-md); box-shadow:0 0 0 1px #0d2631, 0 3px 12px rgba(0,0,0,0.45); }
        .canvas-wrapper { position:relative; }
        .status-group { display:flex; flex-wrap:wrap; gap:var(--space-2); margin-top:var(--space-2); }
        #status, #stats, #hoverInfo, #colliderDetail { background:rgba(25,40,50,0.55); backdrop-filter:blur(2px); border:1px solid rgba(90,170,200,0.35); border-radius:var(--radius-sm); padding:2px 6px; color:#e8f7ff !important; font-weight:500; text-shadow:0 0 3px rgba(0,0,0,0.7); }
        .auto-hide:empty { display:none !important; }
        #hoverInfo { margin-top:4px; }
        #roomList { max-height:28vh; overflow:auto; border:1px solid var(--c-border-subtle); border-radius:var(--radius-sm); scroll-behavior:smooth; }
        .collider-item { font-size:12px; line-height:1.15; padding:4px 8px; }
        #roomList .list-group-item.collider-item { background:#133043; color:#f0f6fc; border:0; border-bottom:1px solid #0f2735; }
        #roomList .list-group-item.collider-item:last-child { border-bottom:0; }
        #roomList .list-group-item.collider-item:hover { background:#19465f; color:#ffffff; }
        #roomList .list-group-item.collider-item.active-room { background:#256d8f; color:#fff; font-weight:600; }

    .collider-side { position:sticky; top:var(--space-3); background:var(--c-bg-panel); border:1px solid var(--c-border-panel); border-radius:var(--radius-md); padding:var(--space-3) var(--space-3) calc(var(--space-3) + 2px); box-shadow:var(--shadow-panel); display:flex; flex-direction:column; gap:var(--space-3); font-size:13px; }
    .collider-side h5.page-title { margin:0 0 var(--space-1); color:#f5fbff; font-weight:600; letter-spacing:.5px; text-shadow:0 1px 2px #000; font-size:1.1rem; display:flex; align-items:center; gap:6px; }
    .panel-section { display:flex; flex-direction:column; gap:var(--space-2); }
    .panel-section + .panel-section { border-top:1px solid rgba(255,255,255,0.05); padding-top:var(--space-3); }
    .panel-section h5 { margin:0; color:#f5fbff; font-weight:600; font-size:.9rem; letter-spacing:.5px; display:flex; align-items:center; gap:6px; }
    .panel-section h6 { margin:0; color:#d6ecf5; font-weight:600; font-size:.7rem; letter-spacing:.75px; text-transform:uppercase; opacity:.85; }
    .panel-section.primary h5 { position:relative; padding-left:10px; }
    .panel-section.primary h5:before { content:""; position:absolute; left:0; top:50%; transform:translateY(-50%); width:4px; height:60%; background:var(--c-accent); border-radius:2px; box-shadow:0 0 6px rgba(47,168,216,.6); }
        .panel-small { font-size:11px; color:var(--c-text-dim); }
        .legend { display:grid; grid-template-columns:repeat(auto-fill,minmax(70px,1fr)); gap:4px; }
        .legend span { display:inline-flex; align-items:center; justify-content:center; padding:2px 4px; border-radius:var(--radius-sm); font-size:10px; line-height:1.1; border:1px solid rgba(255,255,255,0.12); background:#1a2f3b; color:#dff7ff; font-weight:500; }
        .filter-swatch { display:inline-block; width:14px; height:14px; border:1px solid rgba(0,0,0,0.55); margin-right:4px; border-radius:3px; box-shadow:0 0 0 1px rgba(0,0,0,0.6), 0 0 4px rgba(0,0,0,0.5); }
        #filterList { display:grid; grid-template-columns:repeat(auto-fill,minmax(120px,1fr)); gap:2px 6px; }
        #filterList .form-check { padding:2px 2px; margin:0; display:flex; align-items:center; gap:6px; background:#123040; border:1px solid #1d4558; border-radius:var(--radius-sm); }
        #filterList .form-check:hover { background:#16495e; }
        #filterList .form-check-input { margin:0; position:static; width:16px; height:16px; cursor:pointer; background:#1b3643; border:1px solid #2a5f77; }
        #filterList .form-check-input:checked { background:var(--c-accent); border-color:var(--c-accent); }
        #filterList label { cursor:pointer; user-select:none; display:flex; align-items:center; gap:6px; margin:0; font-size:11px; color:var(--c-text); }
        .btn-outline-dark, .btn-light { background:#123040; color:#e0f8ff; border:1px solid var(--c-border-strong); }
        .btn-outline-dark:hover, .btn-light:hover, .btn-outline-dark.active { background:#1d566f; color:#fff; }
        .form-check-input { background:#1b3643; border:1px solid #2a5f77; }
        .form-check-input:checked { background:var(--c-accent); border-color:var(--c-accent); }
    .input-group-sm > .form-control { background:#123040; border:1px solid var(--c-border-strong); color:var(--c-text); }
    .input-group-sm > .form-control:focus { background:#163b4d; color:#fff; }
    .input-group-sm .btn { background:#123040; border:1px solid var(--c-border-strong); color:var(--c-text); }
    .input-group-sm .btn:hover { background:#1d566f; color:#fff; }
    .input-group-sm .form-control, .input-group-sm .btn { height:30px; }
        .section-inline-controls { display:flex; flex-wrap:wrap; gap:4px; }
        ul.compact-list { list-style:disc; padding-left:16px; margin:0; display:flex; flex-direction:column; gap:2px; }
        ul.compact-list li { color:#d6ecf5; font-size:11px; }
        .export-group .btn { flex:1; }
        .collider-side #colliderDetail { min-height:18px; }
        .canvas-wrapper:focus-within #colliderCanvas { outline:2px solid var(--c-accent); }
    </style>
}
<div class="container-fluid mt-3">
    <div class="row">
        <div class="col-md-3">
            <div class="collider-side" role="complementary" aria-label="Colliders sidebar">
                <h5 class="page-title">@ViewData["ServerName"] Rooms</h5>

                <div class="panel-section primary" aria-labelledby="rooms-heading">
                    <h5 id="rooms-heading">Rooms</h5>
                    <div id="roomList" class="list-group"></div>
                </div>

                <div class="panel-section primary" aria-labelledby="filters-heading">
                    <h5 id="filters-heading">Filters</h5>
                    <div id="filterList"></div>
                </div>

                <div class="panel-section primary" aria-labelledby="display-heading">
                    <h5 id="display-heading">Display</h5>
                    <div class="section-inline-controls">
                        <div class="btn-group btn-group-sm" role="group">
                            <button id="resetView" class="btn btn-light" title="Fit current room bounds (F)">Fit</button>
                            <button id="autoFitToggle" class="btn btn-outline-dark active" data-enabled="true" title="Auto-fit when bounds grow">Auto-Fit</button>
                        </div>
                        <button id="toggleBBox" class="btn btn-sm btn-outline-dark" data-enabled="false" title="Show bounding box">BBox</button>
                    </div>
                    <div class="section-inline-controls">
                        <div class="form-check form-check-sm">
                            <input class="form-check-input" type="checkbox" id="showGrid" checked>
                            <label class="form-check-label" for="showGrid">Grid</label>
                        </div>
                        <div class="form-check form-check-sm">
                            <input class="form-check-input" type="checkbox" id="flashChanges" checked>
                            <label class="form-check-label" for="flashChanges">Flash</label>
                        </div>
                        <div class="form-check form-check-sm">
                            <input class="form-check-input" type="checkbox" id="showInactive" checked>
                            <label class="form-check-label" for="showInactive">Inactive</label>
                        </div>
                        <div class="form-check form-check-sm">
                            <input class="form-check-input" type="checkbox" id="showInvisible" checked>
                            <label class="form-check-label" for="showInvisible">Invisible</label>
                        </div>
                    </div>
                </div>

                <div class="panel-section" aria-labelledby="search-heading">
                    <h5 id="search-heading">Search</h5>
                    <div class="input-group input-group-sm">
                        <input type="text" id="searchCollider" class="form-control" placeholder="ID or partial..." aria-label="Collider search" />
                        <button id="searchBtn" class="btn btn-outline-dark" title="Find collider by ID">Find</button>
                    </div>
                </div>

                <div class="panel-section export-group" aria-labelledby="export-heading">
                    <h5 id="export-heading">Export</h5>
                    <div class="btn-group btn-group-sm w-100" role="group">
                        <button id="exportJson" class="btn btn-outline-dark" title="Download collider list as JSON">JSON</button>
                        <button id="exportPng" class="btn btn-outline-dark" title="Download canvas as PNG">PNG</button>
                    </div>
                </div>

                <div class="panel-section" aria-labelledby="controls-heading">
                    <h5 id="controls-heading">Controls</h5>
                    <ul class="compact-list">
                        <li>Drag to pan</li>
                        <li>Scroll to zoom</li>
                        <li>Double-click to reset view</li>
                    </ul>
                </div>

                <div class="panel-section" aria-live="polite">
                    <div id="colliderDetail" class="small auto-hide" aria-label="Collider details"></div>
                </div>
            </div>
        </div>
        <div class="col-md-9">
            <div class="canvas-wrapper">
                <canvas id="colliderCanvas" aria-label="Collider visualization" tabindex="0"></canvas>
            </div>
            <div class="status-group">
                <div id="status" class="small"></div>
                <div id="stats" class="small auto-hide"></div>
                <div id="hoverInfo" class="small auto-hide"></div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/8.0.0/signalr.min.js"
        crossorigin="anonymous" referrerpolicy="no-referrer"></script>
    <script>
        const hub = new signalR.HubConnectionBuilder().withUrl('/hubs/colliders').withAutomaticReconnect().build();
        let rooms = []; let currentRoom = null; let colliders = []; let scale = 32; // world units to pixels
        let zoom = 1; let offsetX = 0; let offsetY = 0; let isPanning = false; let startPan = { x: 0, y: 0 };
        const colors = { Attack: '#ff6b6b', Player: '#4ecdc4', Enemy: '#ffe66d', Default: '#1a535c', Breakable: '#a29bfe', Hazard: '#ff922b', MovingPlatform: '#74c0fc', TriggerTarget: '#e599f7', TriggerReceiver: '#be4bdb', Stomper: '#ff8787', AiAttack: '#ff6b6b' };
        let activeTypes = new Set(Object.keys(colors));
        let version = 0;
        const changeFlash = new Map();
        const FLASH_MS = 1500;
        let lastBbox = null;
        let pendingStats = null;
        let showBBox = false;
        let selectedColliderId = null;
        let fpsFrameCount = 0; let fpsLastTime = performance.now(); let fps = 0;
        let pageActive = true; // false when tab hidden
        let intentionalStop = false; // prevent auto-reconnect when intentionally suspended

        function fitView() {
            if (colliders.length === 0) return;
            const minX = Math.min(...colliders.map(c => c.x));
            const minY = Math.min(...colliders.map(c => c.y));
            const maxX = Math.max(...colliders.map(c => c.x + c.width));
            const maxY = Math.max(...colliders.map(c => c.y + c.height));
            const canvas = document.getElementById('colliderCanvas');
            const padding = 2;
            const w = maxX - minX + padding * 2; const h = maxY - minY + padding * 2;
            zoom = Math.min(canvas.width / (w * scale), canvas.height / (h * scale));
            offsetX = -(minX - padding) * scale * zoom + (canvas.width - w * scale * zoom) / 2;
            offsetY = -(minY - padding) * scale * zoom + (canvas.height - h * scale * zoom) / 2;
        }

        function draw() {
            if (!pageActive) return;
            const canvas = document.getElementById('colliderCanvas');
            const ctx = canvas.getContext('2d');
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            ctx.save();
            ctx.translate(offsetX, offsetY);
            ctx.scale(zoom, zoom);
            if (document.getElementById('showGrid').checked) {
                ctx.save(); ctx.strokeStyle = '#123'; ctx.lineWidth = 1 / zoom;
                const gridSize = scale;
                const cols = 200; const rows = 200;
                for (let i = -cols; i < cols; i++) {
                    ctx.beginPath(); ctx.moveTo(i * gridSize, -rows * gridSize); ctx.lineTo(i * gridSize, rows * gridSize); ctx.stroke();
                }
                for (let j = -rows; j < rows; j++) {
                    ctx.beginPath(); ctx.moveTo(-cols * gridSize, j * gridSize); ctx.lineTo(cols * gridSize, j * gridSize); ctx.stroke();
                }
                ctx.restore();
            }
            const now = performance.now();
            const showInactive = document.getElementById('showInactive')?.checked ?? true;
            const showInvisible = document.getElementById('showInvisible')?.checked ?? true;
            for (const c of colliders) {
                if (!activeTypes.has(c.type)) continue;
                if (!showInactive && !c.active) continue;
                if (!showInvisible && c.invisible) continue;
                const color = colors[c.type] || colors.Default;
                let baseColor = c.active ? color : '#555';
                const t = changeFlash.get(c.id);
                if (document.getElementById('flashChanges').checked && t && now - t < FLASH_MS) {
                    const alpha = 1 - (now - t) / FLASH_MS;
                    ctx.fillStyle = shadeColor(baseColor, alpha * 40);
                } else {
                    ctx.fillStyle = baseColor;
                }
                ctx.globalAlpha = c.invisible ? 0.3 : 0.8;
                ctx.fillRect(c.x * scale, (-(c.y + c.height)) * scale, c.width * scale, c.height * scale);
                ctx.globalAlpha = 1.0;
                ctx.strokeStyle = '#222';
                ctx.lineWidth = 1 / zoom;
                ctx.strokeRect(c.x * scale, (-(c.y + c.height)) * scale, c.width * scale, c.height * scale);
                if (selectedColliderId === c.id) {
                    ctx.strokeStyle = '#ffff00';
                    ctx.lineWidth = 2 / zoom;
                    ctx.strokeRect(c.x * scale, (-(c.y + c.height)) * scale, c.width * scale, c.height * scale);
                }
            }
            if (showBBox && lastBbox) {
                ctx.save();
                ctx.strokeStyle = 'rgba(255,255,255,0.5)';
                ctx.setLineDash([6 / zoom, 4 / zoom]);
                ctx.lineWidth = 1.5 / zoom;
                ctx.strokeRect(lastBbox.minX * scale, (-(lastBbox.minY + lastBbox.height)) * scale, lastBbox.width * scale, lastBbox.height * scale);
                ctx.restore();
            }
            ctx.restore();
            document.getElementById('status').innerText = currentRoom ? `${currentRoom.name} | V${version} | Colliders: ${colliders.length} | Zoom: ${zoom.toFixed(2)} | FPS: ${fps.toFixed(0)}` : 'No room selected';
            if (pendingStats) { const statsEl = document.getElementById('stats'); if (statsEl) statsEl.innerText = `Δ Added:${pendingStats.added} Updated:${pendingStats.updated} Removed:${pendingStats.removed} Bounds: ${pendingStats.bbox.width.toFixed(1)}x${pendingStats.bbox.height.toFixed(1)}`; pendingStats = null; }
            if (pageActive && (changeFlash.size > 0 || selectedColliderId)) scheduleNextFrame();
            fpsFrameCount++; const nowTs = performance.now(); if (nowTs - fpsLastTime >= 1000) { fps = (fpsFrameCount * 1000) / (nowTs - fpsLastTime); fpsFrameCount = 0; fpsLastTime = nowTs; }
        }
        const MAX_FPS = 30; let lastFrameTs = 0;
        function scheduleNextFrame() {
            if (!pageActive) return;
            requestAnimationFrame(ts => {
                if (!pageActive) return; // re-check after frame
                if (ts - lastFrameTs >= 1000 / MAX_FPS) {
                    lastFrameTs = ts;
                    draw();
                } else if (changeFlash.size > 0 || selectedColliderId) {
                    scheduleNextFrame();
                }
            });
        }

        function shadeColor(hex, percent) {
            const num = parseInt(hex.replace('#', ''), 16);
            let r = (num >> 16) + percent;
            let g = ((num >> 8) & 0x00FF) + percent;
            let b = (num & 0x0000FF) + percent;
            r = Math.min(255, Math.max(0, r)); g = Math.min(255, Math.max(0, g)); b = Math.min(255, Math.max(0, b));
            return '#' + (r << 16 | g << 8 | b).toString(16).padStart(6, '0');
        }

        function resizeCanvas() { const canvas = document.getElementById('colliderCanvas'); canvas.width = canvas.clientWidth; canvas.height = canvas.clientHeight; draw(); }
        window.addEventListener('resize', () => { resizeCanvas(); fitView(); draw(); });

        function buildFilters() {
            const container = document.getElementById('filterList');
            container.innerHTML = '';
            Object.keys(colors).forEach(t => {
                const id = 'flt_' + t;
                const swatch = colors[t] || '#1a535c';
                const div = document.createElement('div');
                div.className = 'form-check';
                const input = document.createElement('input');
                input.type = 'checkbox';
                input.className = 'form-check-input';
                input.id = id;
                input.checked = activeTypes.has(t);
                const label = document.createElement('label');
                label.className = 'form-check-label small';
                label.setAttribute('for', id);
                const span = document.createElement('span');
                span.className = 'filter-swatch';
                span.style.background = swatch;
                label.appendChild(span);
                label.appendChild(document.createTextNode(t));
                div.appendChild(input);
                div.appendChild(label);
                container.appendChild(div);
                input.addEventListener('change', e => { if (e.target.checked) activeTypes.add(t); else activeTypes.delete(t); draw(); });
            });
        }
        async function loadRooms() {
            rooms = await hub.invoke('GetRooms'); const list = document.getElementById('roomList'); list.innerHTML = '';
            rooms.forEach(r => {
                 const a = document.createElement('a');
                 a.href = '#';
                 a.className = 'list-group-item list-group-item-action collider-item';
                 const levelId = r.levelId ?? r.LevelId ?? '?';
                 const roomInstanceId = r.roomInstanceId ?? r.RoomInstanceId ?? '?';
                 const name = r.name ?? r.Name ?? 'Unnamed';
                 a.textContent = `${levelId}:${roomInstanceId} ${name}`;
                 a.dataset.levelId = levelId;
                 a.dataset.roomInstanceId = roomInstanceId;
                 a.onclick = (e) => { e.preventDefault(); selectRoom(r); highlightActiveRoom(levelId, roomInstanceId); };
                 list.appendChild(a);
            });
            buildFilters();
             if (currentRoom) highlightActiveRoom(currentRoom.levelId, currentRoom.roomInstanceId);
         }

        async function selectRoom(r) {
            if (currentRoom) await hub.invoke('UnsubscribeRoom', currentRoom.levelId, currentRoom.roomInstanceId);
            currentRoom = { levelId: r.levelId ?? r.LevelId, roomInstanceId: r.roomInstanceId ?? r.RoomInstanceId, name: r.name ?? r.Name ?? 'Unnamed' };
            // Clear transient panels
            const detailEl = document.getElementById('colliderDetail'); if (detailEl) detailEl.textContent='';
            const statsEl = document.getElementById('stats'); if (statsEl) statsEl.textContent='';
            const hoverEl = document.getElementById('hoverInfo'); if (hoverEl) hoverEl.textContent='';
            const data = await hub.invoke('SubscribeRoom', currentRoom.levelId, currentRoom.roomInstanceId);
            if (data) {
                colliders = data.colliders || data.Colliders || [];
                version = data.version || 0;
                lastBbox = data.bbox || null;
                changeFlash.clear();
                colliders.forEach(c => changeFlash.set(c.id, performance.now()));
                fitView();
                persistView();
                highlightActiveRoom(currentRoom.levelId, currentRoom.roomInstanceId);
                draw();
            }
        }
        function highlightActiveRoom(levelId, roomInstanceId) {
            const list = document.getElementById('roomList'); if (!list) return;
            [...list.querySelectorAll('.collider-item')].forEach(a => a.classList.toggle('active-room', a.dataset.levelId == levelId && a.dataset.roomInstanceId == roomInstanceId));
        }

        hub.on('collidersUpdated', payload => { if (!currentRoom) return; if (payload.levelId === currentRoom.levelId && payload.roomInstanceId === currentRoom.roomInstanceId) { colliders = payload.colliders; version = payload.version || version + 1; lastBbox = payload.bbox || lastBbox; fitView(); persistView(); draw(); } });
        hub.on('collidersReset', payload => { if (!currentRoom) return; if (payload.levelId === currentRoom.levelId && payload.roomInstanceId === currentRoom.roomInstanceId) { colliders = payload.colliders; version = payload.version || 0; lastBbox = payload.bbox || null; changeFlash.clear(); colliders.forEach(c => changeFlash.set(c.id, performance.now())); fitView(); persistView(); draw(); } });
        hub.on('collidersDiff', payload => {
            if (!currentRoom) return;
            if (payload.levelId !== currentRoom.levelId || payload.roomInstanceId !== currentRoom.roomInstanceId) return;
            if (payload.version && payload.version <= version) return; // stale
            version = payload.version || version + 1;
            if (payload.removed) { const remSet = new Set(payload.removed); colliders = colliders.filter(c => !remSet.has(c.id)); }
            if (payload.updated) { const map = new Map(colliders.map(c => [c.id, c])); payload.updated.forEach(u => { if (map.has(u.id)) { Object.assign(map.get(u.id), u); changeFlash.set(u.id, performance.now()); } }); colliders = Array.from(map.values()); }
            if (payload.added) { payload.added.forEach(a => { colliders.push(a); changeFlash.set(a.id, performance.now()); }); }
            if (payload.bbox) { if (lastBbox) { const growth = (payload.bbox.width * payload.bbox.height) / (lastBbox.width * lastBbox.height + 0.0001); if (growth > 1.25 && document.getElementById('autoFitToggle').dataset.enabled === 'true') fitView(); } lastBbox = payload.bbox; }
            if (payload.stats) { pendingStats = { ...payload.stats, bbox: payload.bbox || { width: 0, height: 0 } }; }
            persistView();
            draw();
        });

        function persistView() { if (!currentRoom) return; const state = { zoom, offsetX, offsetY, active: [...activeTypes] }; localStorage.setItem('colliderView_' + currentRoom.levelId + '_' + currentRoom.roomInstanceId, JSON.stringify(state)); }
        function restoreView() { if (!currentRoom) return; const raw = localStorage.getItem('colliderView_' + currentRoom.levelId + '_' + currentRoom.roomInstanceId); if (!raw) return; try { const s = JSON.parse(raw); zoom = s.zoom; offsetX = s.offsetX; offsetY = s.offsetY; activeTypes = new Set(s.active); buildFilters(); } catch (_) { } }

    function initUi() {
            const required = ['autoFitToggle','flashChanges','toggleBBox','showInactive','showInvisible','searchBtn','searchCollider','exportJson','exportPng','colliderCanvas'];
            const missing = required.filter(id => !document.getElementById(id));
            if (missing.length) {
                if (document.readyState !== 'complete') {
                    return setTimeout(initUi, 40);
                }
                console.warn('Colliders page: missing expected elements:', missing.join(','));
            }
            const autoFitToggle = document.getElementById('autoFitToggle');
            if (!autoFitToggle) return; // can't proceed
            autoFitToggle.addEventListener('click', e => { const btn = e.target; const enabled = btn.dataset.enabled === 'true'; btn.dataset.enabled = (!enabled).toString(); btn.classList.toggle('active', !enabled); });
            document.getElementById('flashChanges')?.addEventListener('change', () => draw());
            document.getElementById('toggleBBox')?.addEventListener('click', e => { showBBox = !showBBox; e.target.classList.toggle('active', showBBox); draw(); });
            document.getElementById('showInactive')?.addEventListener('change', () => draw());
            document.getElementById('showInvisible')?.addEventListener('change', () => draw());
            document.getElementById('searchBtn')?.addEventListener('click', () => searchCollider());
            document.getElementById('searchCollider')?.addEventListener('keydown', e => { if (e.key === 'Enter') searchCollider(); });
            document.getElementById('exportJson')?.addEventListener('click', () => { const data = JSON.stringify({ room: currentRoom, version, colliders }, null, 2); const blob = new Blob([data], { type: 'application/json' }); const a = document.createElement('a'); a.href = URL.createObjectURL(blob); a.download = `colliders_${currentRoom?.levelId || 'unknown'}_${currentRoom?.roomInstanceId || 'x'}_v${version}.json`; a.click(); URL.revokeObjectURL(a.href); });
            document.getElementById('exportPng')?.addEventListener('click', () => { const canvas = document.getElementById('colliderCanvas'); const a = document.createElement('a'); a.href = canvas.toDataURL('image/png'); a.download = `colliders_${currentRoom?.levelId || 'unknown'}_${currentRoom?.roomInstanceId || 'x'}_v${version}.png`; a.click(); });

            const colliderCanvas = document.getElementById('colliderCanvas');
            if (!colliderCanvas) return;
            colliderCanvas.addEventListener('mousemove', onCanvasMove);
            colliderCanvas.addEventListener('click', onCanvasClick);
            colliderCanvas.addEventListener('mousedown', e => { isPanning = true; startPan = { x: e.clientX, y: e.clientY }; document.body.style.cursor = 'grabbing'; });
            colliderCanvas.addEventListener('wheel', e => { e.preventDefault(); const canvas = e.target; const rect = canvas.getBoundingClientRect(); const mx = e.clientX - rect.left; const my = e.clientY - rect.top; const prevZoom = zoom; zoom *= e.deltaY < 0 ? 1.1 : 0.9; zoom = Math.min(Math.max(zoom, 0.05), 20); offsetX = mx - (mx - offsetX) * (zoom / prevZoom); offsetY = my - (my - offsetY) * (zoom / prevZoom); draw(); }, { passive: false });
            colliderCanvas.addEventListener('dblclick', () => { fitView(); draw(); });
            document.getElementById('resetView')?.addEventListener('click', () => { fitView(); draw(); });

            hub.onclose(err => {
                console.error('Collider hub closed', err);
                if (!intentionalStop) {
                    setTimeout(() => { if (pageActive && hub.state === signalR.HubConnectionState.Disconnected) hub.start().catch(e => console.error('Restart failed', e)); }, 2000);
                }
            });
            hub.onreconnecting(err => console.warn('Collider hub reconnecting...', err));
            hub.onreconnected(id => console.info('Collider hub reconnected', id));
            hub.start().then(() => { loadRooms(); resizeCanvas(); }).catch(err => console.error('Collider hub start failed', err));
            document.addEventListener('visibilitychange', () => { if (document.hidden) suspendPage(); else resumePage(); });
            window.addEventListener('beforeunload', () => { suspendPage(); });
        }

        if (document.readyState === 'loading') {
            document.addEventListener('DOMContentLoaded', initUi);
        } else {
            initUi();
        }

        function searchCollider() {
            const term = document.getElementById('searchCollider').value.trim();
            if (!term) { selectedColliderId = null; document.getElementById('colliderDetail').textContent = ''; draw(); return; }
            const found = colliders.find(c => c.id.toLowerCase().includes(term.toLowerCase()));
            if (found) { selectedColliderId = found.id; document.getElementById('colliderDetail').textContent = `Selected: ${found.id} | ${found.type}`; panTo(found); draw(); }
        }
        function panTo(c) { const canvas = document.getElementById('colliderCanvas'); const cx = (c.x + c.width / 2) * scale * zoom + offsetX; const cy = (-(c.y + c.height / 2)) * scale * zoom + offsetY; const midX = canvas.width / 2; const midY = canvas.height / 2; offsetX += (midX - cx); offsetY += (midY - cy); }

        function onCanvasMove(e) {
            const canvas = e.target; const rect = canvas.getBoundingClientRect(); const mx = (e.clientX - rect.left - offsetX) / (zoom * scale); const my = -((e.clientY - rect.top - offsetY) / (zoom * scale));
            const showInactive = document.getElementById('showInactive')?.checked ?? true; const showInvisible = document.getElementById('showInvisible')?.checked ?? true;
            const found = colliders.find(c => activeTypes.has(c.type) && (showInactive || c.active) && (showInvisible || !c.invisible) && mx >= c.x && mx <= c.x + c.width && my <= c.y && my >= c.y - c.height);
            const info = document.getElementById('hoverInfo');
            if (info) info.textContent = found ? `${found.type} ${found.id} (${found.x.toFixed(2)},${found.y.toFixed(2)}) ${found.width.toFixed(2)}x${found.height.toFixed(2)} ${found.active ? '' : '[inactive]'} ${found.invisible ? '[invis]' : ''}` : '';
        }
        function onCanvasClick(e) {
            const canvas = e.target; const rect = canvas.getBoundingClientRect(); const mx = (e.clientX - rect.left - offsetX) / (zoom * scale); const my = -((e.clientY - rect.top - offsetY) / (zoom * scale));
            const showInactive = document.getElementById('showInactive')?.checked ?? true; const showInvisible = document.getElementById('showInvisible')?.checked ?? true;
            const found = colliders.find(c => activeTypes.has(c.type) && (showInactive || c.active) && (showInvisible || !c.invisible) && mx >= c.x && mx <= c.x + c.width && my <= c.y && my >= c.y - c.height);
            selectedColliderId = found ? found.id : null;
            const detail = document.getElementById('colliderDetail');
            if (detail) detail.textContent = found ? `Selected: ${found.id} | ${found.type} | Pos(${found.x.toFixed(2)},${found.y.toFixed(2)}) Size(${found.width.toFixed(2)}x${found.height.toFixed(2)}) Plane:${found.plane}` : '';
            draw();
        }

        window.addEventListener('mouseup', () => { isPanning = false; document.body.style.cursor = 'default'; });
        window.addEventListener('mousemove', e => { if (!isPanning) return; const dx = e.clientX - startPan.x; const dy = e.clientY - startPan.y; startPan = { x: e.clientX, y: e.clientY }; offsetX += dx; offsetY += dy; draw(); });
    </script>
}
