@page "/commands"
@using Server.Reawakened.XMLs.Data.Commands
@using Web.Razor.Pages
@model CommandsModel

@{
    ViewData["Title"] = "Commands";
}

@section Scripts {
    <script>
        $(document).ready(function () {
            $('.options-toggle').click(function () {
                var $this = $(this);
                var targetId = $this.data('target');
                var $target = $(targetId);

                if ($target.hasClass('show')) {
                    $this.text('Show Options');
                } else {
                    $this.text('Hide Options');
                }
            });
        });
    </script>
}

<section class="mq-container mt-space fade-in">
    @await Html.PartialAsync("_PanelShell", new Web.Razor.Pages.Shared.PanelShellModel { Title = (string)ViewData["ServerName"] + " Command Reference", Description = "Note: Some commands may not be fully implemented or may not work on older versions.", Center = true, AdditionalClasses = "flow panel-p-lg" })
    @functions {
        private void RenderParameter(ParameterModel parameter, string parentId)
        {
            var optionsId = $"{parentId.Replace("/", "").ToLower()}-{parameter.Name.Replace("/", "").ToLower()}";
            <div class="parameter-nest" style="margin-top:10px;" data-reveal>
                <div>
                    <h5 style="font-size:.75rem; margin:0 0 4px; color:var(--mq-color-accent-soft); letter-spacing:.5px;">
                        @parameter.Name
                        @if (parameter.Optional)
                        {
                            <span class="optional-indicator">(Optional)</span>
                        }
                    </h5>
                    <p style="font-size:.65rem; line-height:1.25; color:var(--mq-color-text-dim); margin:0 0 6px;">@parameter.Description</p>
                    @if (parameter.Options != null && parameter.Options.Any())
                    {
                        <div class="options-collapse collapse" id="@optionsId">
                            @foreach (var option in parameter.Options)
                            {
                                <div class="border-left pl-3 option-item">
                                    <strong>Option:</strong> @option.Name - @option.Description
                                    @if (option.Parameters != null && option.Parameters.Any())
                                    {
                                        int parameterId = 0;
                                        foreach (var subParameter in option.Parameters)
                                        {
                                            parameterId++;
                                            RenderParameter(subParameter, $"{optionsId}-{parameterId}");
                                        }
                                    }
                                </div>
                            }
                        </div>
                        <button class="btn-modern btn-pad-md" style="margin-top:4px; font-size:.6rem; letter-spacing:.75px; text-transform:uppercase;" data-toggle="collapse" data-target="#@optionsId" aria-expanded="false" aria-controls="@optionsId">Show Options</button>
                    }
                </div>
            </div>
        }

        private void RenderCommandList(List<CommandModel> commands, string name)
        {
            <h2 class="t-sub" style="margin-top:2rem;" data-reveal>@name Commands</h2>
            <div class="command-grid mt-2" data-reveal>
                @foreach (var command in commands)
                {
                    <div class="command-card-modern" data-reveal>
                        <div>
                            <h3>@command.CommandName</h3>
                            <p>@command.CommandDescription</p>
                        </div>
                        @if (command.Parameters != null && command.Parameters.Any())
                        {
                            int parameterId = 0;
                            foreach (var parameter in command.Parameters)
                            {
                                parameterId++;
                                RenderParameter(parameter, $"options-{name}-{command.CommandName}-{parameterId}");
                            }
                        }
                        <div class="command-meta @(command.AccessLevel > Server.Base.Accounts.Enums.AccessLevel.Player ? "danger" : null)">
                            <span>Requires @command.AccessLevel</span>
                        </div>
                    </div>
                }
            </div>
        }
    }
    <div class="flow" style="margin-top:1rem;">
        @if ((Model.ServerCommands == null || !Model.ServerCommands.Any()) && (Model.ClientCommands == null || !Model.ClientCommands.Any()))
        {
            <div class="panel-glass" style="background:rgba(255,255,255,0.02); padding:1.25rem; border-radius:16px; border:1px dashed #1e5166;">
                <p style="font-size:.75rem; letter-spacing:.4px; color:var(--mq-color-text-dim); margin:0;">No commands are currently loaded. This usually means the server hasn't finished starting or command bundles are still initializing. Refresh in a moment.</p>
            </div>
        }
        else
        {
            RenderCommandList(Model.ServerCommands ?? new List<CommandModel>(), "Server");
            RenderCommandList(Model.ClientCommands ?? new List<CommandModel>(), "Client");
        }
    </div>
    </div>
</section>