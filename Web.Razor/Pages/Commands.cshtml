@page "/commands"
@using Server.Reawakened.XMLs.Data.Commands
@using Web.Razor.Pages
@model CommandsModel

@{
    ViewData["Title"] = "Commands";
}

@section Scripts {
    <script>
        $(document).ready(function () {
            $('.options-toggle').click(function () {
                var $this = $(this);
                var targetId = $this.data('target');
                var $target = $(targetId);

                if ($target.hasClass('show')) {
                    $this.text('Show Options');
                } else {
                    $this.text('Hide Options');
                }
            });
        });
    </script>
}

<div class="container card-text-body">
    <header class="text-center my-4 site-header">
        <h1 class="mb-0">@ViewData["ServerName"] Command Reference</h1>
        <p class="site-description">Note! Commands may not be fully implemented, or may not work on older versions of MQ.</p>
    </header>
    @functions {
        private void RenderParameter(ParameterModel parameter, string parentId)
        {
            var optionsId = $"{parentId.Replace("/", "").ToLower()}-{parameter.Name.Replace("/", "").ToLower()}";
            <div class="card my-2 parameter-card">
                <div class="card-body">
                    <h5 class="card-title">
                        @parameter.Name
                        @if (parameter.Optional)
                        {
                            <span class="optional-indicator">(Optional)</span>
                        }
                    </h5>
                    <p class="card-text">@parameter.Description</p>
                    @if (parameter.Options != null && parameter.Options.Any())
                    {
                        <div class="options-collapse collapse" id="@optionsId">
                            @foreach (var option in parameter.Options)
                            {
                                <div class="border-left pl-3 option-item">
                                    <strong>Option:</strong> @option.Name - @option.Description
                                    @if (option.Parameters != null && option.Parameters.Any())
                                    {
                                        int parameterId = 0;
                                        foreach (var subParameter in option.Parameters)
                                        {
                                            parameterId++;
                                            RenderParameter(subParameter, $"{optionsId}-{parameterId}");
                                        }
                                    }
                                </div>
                            }
                        </div>
                        <button class="options-toggle btn btn-link" data-toggle="collapse" data-target="#@optionsId" aria-expanded="false" aria-controls="@optionsId">
                            Show Options
                        </button>
                    }
                </div>
            </div>
        }

        private void RenderCommandList(List<CommandModel> commands, string name)
        {
            <div class="container">
                <h2 class="section-header text-center mt-4">@name Commands</h2>
                <div class="row">
                    @foreach (var command in commands)
                    {
                        <div class="col-md-4 mb-4">
                            <div class="card command-card h-100">
                                <div class="card-header">
                                    <h3>@command.CommandName</h3>
                                </div>
                                <div class="card-body">
                                    <p>@command.CommandDescription</p>
                                    @if (command.Parameters != null && command.Parameters.Any())
                                    {
                                        int parameterId = 0;
                                        foreach (var parameter in command.Parameters)
                                        {
                                            parameterId++;
                                            RenderParameter(parameter, $"options-{name}-{command.CommandName}-{parameterId}");
                                        }
                                    }
                                </div>
                                <div class="card-footer @(command.AccessLevel > Server.Base.Accounts.Enums.AccessLevel.Player ? "custom-red" : "custom-blue")">
                                    Requires: @command.AccessLevel
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
        }
    }
    <div class="commands">
        @{
            RenderCommandList(Model.ServerCommands, "Server");
            RenderCommandList(Model.ClientCommands, "Client");
        }
    </div>
</div>